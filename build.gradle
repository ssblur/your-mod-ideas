plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "com.palantir.git-version" version "0.15.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.2+build.3:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "com.palantir.git-version"

    archivesBaseName = rootProject.archives_base_name
    def matcher = gitVersion() =~ /^v(\d+\.\d+\.\d+.*)/
    matcher.find()
    if(matcher.groupCount() >= 1)
        version = matcher.group(1)
    else
        version = "dev"
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    tasks.register("signedJar") {
        def output = layout.buildDirectory.dir("libs")
                .get()
                .file(remapJar.archiveFileName.get().replace(".jar", "-sgd.jar"))
                .toString()

        outputs.file new File(output)

        dependsOn remapJar

        doLast {
            System.out.println("Signing jar...")

            def store = System.getenv("JAR_SIGNING_STORE")
            def storeLoc = layout.buildDirectory.file("/store.jks").get().asFile
            def writer = new FileOutputStream(storeLoc)
            writer.write(Base64.getUrlDecoder().decode(store))
            writer.close()

            def alias = System.getenv("JAR_SIGNING_ALIAS")
            def storePass = System.getenv("JAR_SIGNING_STORE_PASS")
            def keyPass = System.getenv("JAR_SIGNING_KEY_PASS")

            def input = layout.buildDirectory.dir("libs")
                    .get()
                    .file(remapJar.archiveFileName.get())
                    .toString()
            def jarsigner = [
                    "jarsigner",
                    "-keystore", storeLoc.toPath().toString(),
                    "-storepass", storePass,
                    "-signedjar", output,
                    "-keypass", keyPass,
                    input,
                    alias
            ].execute()
            jarsigner.waitFor()
        }
    }
}
